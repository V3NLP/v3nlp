/* Family History UMLS Concept Interface
 *
 *   Jape Transducer
 *   fh_umls.jape
 *
 * The purpose of the Family History UMLS Interface is to extract all UMLS
 * Concepts that are required to accurately detect medical conditions of
 * the patient's family members.
 * 
 * UMLS Concepts are annotated by the NLP UMLS Concept finder module of the
 * application and are stored in the UMLS_Concept AnnotationSet.  The UMLS
 * Concept finder uses a configuration file specified in its
 * "sectionCriteriaLocation" property to determine which sections of the
 * medical record to search for UMLS concepts.
 * 
 * UMLS_Concept Annotations have a "Semantic Types" feature that indicates
 * if the UMLS concept is a family member, or a medical condition.  If the
 * UMLS concept is a condition, then the type(s) of the condition(s) are
 * listed in the "Semantic Types" property.  The Semantic Types feature has a
 * value of type Java List.
 * 
 * The "Semantic Types" feature of the UMLS_Concept AnnotationSet cannot be
 * used in Jape pattern matching rules because it is not a string type.  
 * 
 * The Family History UMLS Concept Interface creates a new AnnotationSet,
 * FH_UMLS, with information about every relevant UMLS Concept in a format
 * that is entirely compatible with Jape pattern matching.
 * 
 * The Family History UMLS Concept Interface uses a single Jape rule,
 * Parse_UMLS_Concept, that matches every Annotation in UMLS_Concept, and
 * creates an Annotation with data about each UMLS Concept in a new
 * AnnotationSet "FH_UMLS".  All the features of FH_UMLS are entirely
 * compatible with Jape pattern matching.
 * 
 * Java code is used in the RHS of the rule to access the data in the
 * "Semantic Types" feature of the UMLS Concepts.  The rule divides UMLS
 * concepts into three types: "Family Members", "Findings" and "?".
 * 
 * The rule has a conditional statement that can be used to "filter out"
 * certain UMLS Concepts with a Semantic Type of "Family Group", e.g.
 * couples, relatives.  These UMLS Concepts are assigned a Type of "?".  This
 * may be desirable to prevent certain words that are can be mistakenly
 * assigned the Family Group Semantic Type from being matched by subsequent
 * Family History Jape rules.
 * 
 * The rule has a conditional statement that is used to specify all the
 * Semantic Types of UMLS Concepts that will be considered to be medical
 * findings.  All matching UMLS Concepts will be given a Type of "Finding"
 * in FH_UMLS.
 * 
 * The rule has a conditional statement that can be used to "filter out"
 * UMLS Concepts that have been determined to be "Findings".  This may be
 * desirable to prevent certain words that are can be mistakenly assigned a
 * medical condition Semantic Type from being matched by subsequent Family
 * History Jape rules.
 * 
 * The Family History UMLS Concept Interface must be the first Family History
 * Jape Transducer in the application pipeline.
 * 
 *   Chris Pastuszak  August 17, 2006
 */


Phase:    Family_History_Parse_UMLS
Input:    concept
Options:  control = appelt


/****************************************************************************
 * Parse UMLS Concept
 *
 *   Output AnnotationSet:
 *     FH_UMLS
 *
 *   FH_UMLS Features:
 *     cui              CUI of the UMLS Concept.
 *     Type			    "Family Member", "Finding" or "?".
 *     rule				Parse_UMLS_Concept
 *     UMLS_Concept_ID  UMLS_Concept Annotation ID of the UMLS Concept.
 *     umls_name UMLS   Name of the UMLS Concept.
 *
 ****************************************************************************/

Rule: Parse_UMLS_Concept
(
   {concept}
)
:parse_umls_concept
-->
{
   // get the AnnotationSet extracted by this rule
   gate.AnnotationSet GAS = (gate.AnnotationSet) bindings.get("parse_umls_concept");

   // System.out.println("--> Running the UMLS concept JAPE transducer...");

   // Create an iterator over the unsorted annotations
   Iterator AnnIT = GAS.iterator();

   String  cui;
   String  umls_name;
   List    semantic_types;
   int     UMLS_Concept_ID;
   String  Type;

   gate.Annotation Ann;

   while (AnnIT.hasNext()) {
      Ann = (gate.Annotation) AnnIT.next();

      // get the CUI, Semantic_Type, and umls_name for this UMLS_Concept annotation
      cui            = (String) Ann.getFeatures().get("cui");
      semantic_types = (List) Ann.getFeatures().get("semantic_types");
      umls_name      = (String) Ann.getFeatures().get("umls_name");

      int UMLS_Name_Length = umls_name.length();

      // get the Id of this UMLS_Concept annotation
      UMLS_Concept_ID = Ann.getId().intValue();

      // default value for UMLS Concept type
      Type = "?";

	  // If Semantic Types contains the TUI for "Family Group", then set
	  // Type to "Family Member"
      if ( semantic_types.contains("T099::Family Group")) {

         // Assign a Type of "Family Member" except for the following:
         //   Couples, Husbands, Wives, 
         if ( !umls_name.equals("COUPLES") && 
              !umls_name.equals("HUSBANDS") && 
              !umls_name.equals("WIVES") &&
              ( (UMLS_Name_Length < 8) ||
                !umls_name.substring(0,8).equals("Relative") ) ) {

            Type = "Family Member";
         }
      }
	  // If Semantic Types contains any TUI for a "Finding", then set
	  // Type to "Finding"
      else if ( semantic_types.contains("T019::Congenital Abnormality") |
                 semantic_types.contains("T020::Acquired Abnormality") |
                 semantic_types.contains("T033::Finding") |
                 semantic_types.contains("T037::Injury or Poisoning") |
                 semantic_types.contains("T046::Pathologic Function") |
                 semantic_types.contains("T047::Disease or Syndrome") |
                 semantic_types.contains("T048::Mental or Behavioral Dysfunction") |
                 semantic_types.contains("T049::Cell or Molecular Dysfunction") |
                 semantic_types.contains("T190::Anatomical Abnormality") |
                 semantic_types.contains("T191::Neoplastic Process") ) {

         // Assign a Type of "Family Member" except in the following cases:
         //   if the umls_name contains text "(qualifier value)"
         //   if the umls_name begins with text "other"
         if ( ( umls_name.indexOf("(qualifier value)") == -1 ) &&
              ( (UMLS_Name_Length < 5) ||
                !umls_name.substring(0,5).equalsIgnoreCase("other") ) ) {

            Type = "Finding";
         }
      }

      // Create a feature map for the new annotation
      gate.FeatureMap features = Factory.newFeatureMap();

      features.put( "cui", cui );
      features.put( "Type", Type );
      features.put( "rule", "Parse_UMLS_Concept" );
      features.put( "UMLS_Concept_ID", Integer.toString( UMLS_Concept_ID ) );
      features.put( "umls_name", umls_name );

      outputAS.add( GAS.firstNode(), GAS.lastNode(), "FH_UMLS", features );
   }
}


